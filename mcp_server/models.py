# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:03:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AttributeName(RootModel[constr(max_length=65535)]):
    root: constr(max_length=65535)


class BinaryAttributeValue(RootModel[str]):
    root: str


class BinarySetAttributeValue(RootModel[List[BinaryAttributeValue]]):
    root: List[BinaryAttributeValue]


class BooleanAttributeValue(RootModel[bool]):
    root: bool


class Date(RootModel[datetime]):
    root: datetime


class ExpiredIteratorException(RootModel[Any]):
    root: Any


class InternalServerError(RootModel[Any]):
    root: Any


class KeySchemaAttributeName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class KeyType(Enum):
    HASH = 'HASH'
    RANGE = 'RANGE'


class LimitExceededException(RootModel[Any]):
    root: Any


class NullAttributeValue(RootModel[bool]):
    root: bool


class NumberAttributeValue(RootModel[str]):
    root: str


class NumberSetAttributeValue(RootModel[List[NumberAttributeValue]]):
    root: List[NumberAttributeValue]


class OperationType(Enum):
    INSERT = 'INSERT'
    MODIFY = 'MODIFY'
    REMOVE = 'REMOVE'


class PositiveIntegerObject(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PositiveLongObject(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SequenceNumber(RootModel[constr(min_length=21, max_length=40)]):
    root: constr(min_length=21, max_length=40)


class SequenceNumberRange(BaseModel):
    EndingSequenceNumber: Optional[SequenceNumber] = None
    StartingSequenceNumber: Optional[SequenceNumber] = None


class ShardId(RootModel[constr(min_length=28, max_length=65)]):
    root: constr(min_length=28, max_length=65)


class ShardIterator(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ShardIteratorType(Enum):
    TRIM_HORIZON = 'TRIM_HORIZON'
    LATEST = 'LATEST'
    AT_SEQUENCE_NUMBER = 'AT_SEQUENCE_NUMBER'
    AFTER_SEQUENCE_NUMBER = 'AFTER_SEQUENCE_NUMBER'


class StreamArn(RootModel[constr(min_length=37, max_length=1024)]):
    root: constr(min_length=37, max_length=1024)


class StreamStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'


class StreamViewType(Enum):
    NEW_IMAGE = 'NEW_IMAGE'
    OLD_IMAGE = 'OLD_IMAGE'
    NEW_AND_OLD_IMAGES = 'NEW_AND_OLD_IMAGES'
    KEYS_ONLY = 'KEYS_ONLY'


class String(RootModel[str]):
    root: str


class StringAttributeValue(RootModel[str]):
    root: str


class StringSetAttributeValue(RootModel[List[StringAttributeValue]]):
    root: List[StringAttributeValue]


class TableName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)


class TrimmedDataAccessException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    DynamoDBStreams_20120810_DescribeStream = 'DynamoDBStreams_20120810.DescribeStream'


class XAmzTarget1(Enum):
    DynamoDBStreams_20120810_GetRecords = 'DynamoDBStreams_20120810.GetRecords'


class XAmzTarget2(Enum):
    DynamoDBStreams_20120810_GetShardIterator = (
        'DynamoDBStreams_20120810.GetShardIterator'
    )


class XAmzTarget3(Enum):
    DynamoDBStreams_20120810_ListStreams = 'DynamoDBStreams_20120810.ListStreams'


class DescribeStreamInput(BaseModel):
    ExclusiveStartShardId: Optional[ShardId] = None
    Limit: Optional[PositiveIntegerObject] = None
    StreamArn_1: StreamArn = Field(..., alias='StreamArn')


class GetRecordsInput(BaseModel):
    Limit: Optional[PositiveIntegerObject] = None
    ShardIterator_1: ShardIterator = Field(..., alias='ShardIterator')


class GetShardIteratorInput(BaseModel):
    SequenceNumber_1: Optional[SequenceNumber] = Field(None, alias='SequenceNumber')
    ShardId_1: ShardId = Field(..., alias='ShardId')
    ShardIteratorType_1: ShardIteratorType = Field(..., alias='ShardIteratorType')
    StreamArn_1: StreamArn = Field(..., alias='StreamArn')


class GetShardIteratorOutput(BaseModel):
    ShardIterator_1: Optional[ShardIterator] = Field(None, alias='ShardIterator')


class Identity(BaseModel):
    PrincipalId: Optional[String] = None
    Type: Optional[String] = None


class KeySchemaElement(BaseModel):
    AttributeName: KeySchemaAttributeName
    KeyType_1: KeyType = Field(..., alias='KeyType')


class ListStreamsInput(BaseModel):
    ExclusiveStartStreamArn: Optional[StreamArn] = None
    Limit: Optional[PositiveIntegerObject] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class Shard(BaseModel):
    ParentShardId: Optional[ShardId] = None
    SequenceNumberRange_1: Optional[SequenceNumberRange] = Field(
        None, alias='SequenceNumberRange'
    )
    ShardId_1: Optional[ShardId] = Field(None, alias='ShardId')


class ShardDescriptionList(RootModel[List[Shard]]):
    root: List[Shard]


class Stream(BaseModel):
    StreamArn_1: Optional[StreamArn] = Field(None, alias='StreamArn')
    StreamLabel: Optional[String] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class StreamList(RootModel[List[Stream]]):
    root: List[Stream]


class KeySchema(RootModel[List[KeySchemaElement]]):
    root: List[KeySchemaElement] = Field(..., max_length=2, min_length=1)


class ListStreamsOutput(BaseModel):
    LastEvaluatedStreamArn: Optional[StreamArn] = None
    Streams: Optional[StreamList] = None


class StreamDescription(BaseModel):
    CreationRequestDateTime: Optional[Date] = None
    KeySchema_1: Optional[KeySchema] = Field(None, alias='KeySchema')
    LastEvaluatedShardId: Optional[ShardId] = None
    Shards: Optional[ShardDescriptionList] = None
    StreamArn_1: Optional[StreamArn] = Field(None, alias='StreamArn')
    StreamLabel: Optional[String] = None
    StreamStatus_1: Optional[StreamStatus] = Field(None, alias='StreamStatus')
    StreamViewType_1: Optional[StreamViewType] = Field(None, alias='StreamViewType')
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class DescribeStreamOutput(BaseModel):
    StreamDescription_1: Optional[StreamDescription] = Field(
        None, alias='StreamDescription'
    )


class AttributeMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class AttributeValue(BaseModel):
    B: Optional[BinaryAttributeValue] = None
    BOOL: Optional[BooleanAttributeValue] = None
    BS: Optional[BinarySetAttributeValue] = None
    L: Optional[ListAttributeValue] = None
    M: Optional[MapAttributeValue] = None
    N: Optional[NumberAttributeValue] = None
    NS: Optional[NumberSetAttributeValue] = None
    NULL: Optional[NullAttributeValue] = None
    S: Optional[StringAttributeValue] = None
    SS: Optional[StringSetAttributeValue] = None


class GetRecordsOutput(BaseModel):
    NextShardIterator: Optional[ShardIterator] = None
    Records: Optional[RecordList] = None


class ListAttributeValue(RootModel[List[AttributeValue]]):
    root: List[AttributeValue]


class MapAttributeValue(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class Record(BaseModel):
    awsRegion: Optional[String] = None
    dynamodb: Optional[StreamRecord] = None
    eventID: Optional[String] = None
    eventName: Optional[OperationType] = None
    eventSource: Optional[String] = None
    eventVersion: Optional[String] = None
    userIdentity: Optional[Identity] = None


class RecordList(RootModel[List[Record]]):
    root: List[Record]


class StreamRecord(BaseModel):
    ApproximateCreationDateTime: Optional[Date] = None
    Keys: Optional[AttributeMap] = None
    NewImage: Optional[AttributeMap] = None
    OldImage: Optional[AttributeMap] = None
    SequenceNumber_1: Optional[SequenceNumber] = Field(None, alias='SequenceNumber')
    SizeBytes: Optional[PositiveLongObject] = None
    StreamViewType_1: Optional[StreamViewType] = Field(None, alias='StreamViewType')


AttributeMap.model_rebuild()
AttributeValue.model_rebuild()
GetRecordsOutput.model_rebuild()
Record.model_rebuild()
